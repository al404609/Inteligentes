# -*- coding: utf-8 -*-
"""geneticAlgorithms.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1rmWnfd1CjcU4_l-qSPFhCnGHSi3-s7P5
"""

!git clone https://github.com/RobInLabUJI/Pyevolve

import sys
sys.path.append('/content/Pyevolve')

from pyevolve import GSimpleGA
from pyevolve import G1DList
from pyevolve import Mutators, Initializators
from pyevolve import Selectors
from pyevolve import Consts
import math
import collections
collections.Callable = collections.abc.Callable
from matplotlib import pyplot as plt

#vector with the items and their characteristics (value, weight)
vector_items=[('Item0', 10, 5),
         ('Item1', 8, 3),
         ('Item2', 12, 6),
         ('Item3', 6, 2),
         ('Item4', 4, 1),
         ('Item5', 3, 5),
         ('Item6', 7, 4),
         ('Item7', 5, 3),
         ('Item8', 9, 2),
         ('Item9', 11, 7)]
max_capacity = 20 #maximum knapsack capacity

def func_beneficio(genome): 
  valor_total = 0
  peso_total = 0
  for i in range(len(genome)):
    if genome[i] == 1:
      valor_total += vector_items[i][1]
      peso_total += vector_items[i][2]
  if peso_total > max_capacity:
    return 0
  return valor_total

genome = G1DList.G1DList(len(vector_items))
genome.setParams(rangemin=0, rangemax=1) 
genome.evaluator.set(func_beneficio)

#Creating the genetic algorithm
ga = GSimpleGA.GSimpleGA(genome)
ga.setMinimax(Consts.minimaxType["maximize"])
ga.setGenerations(15)
ga.setCrossoverRate(0.8)
ga.setMutationRate(0.5)
ga.setPopulationSize(5)
ga.evolve(freq_stats=1) #shows the results of each generation 1 by 1 (as in the robot)

best=ga.bestIndividual()

print('Best solution found:')
peso_final = 0
valor_final=0
for i in range(len(best)):
    if best[i] == 1:
      peso_final += vector_items[i][2]
      valor_final += vector_items[i][1]
      print(f"- {vector_items[i][0]} (Value: {vector_items[i][1]}, Weight: {vector_items[i][2]})")
print(f"Total value:",valor_final)
print(f"Total capacity used:", peso_final)

plt.plot(best)
plt.xlabel('Items')
plt.ylabel('Decision')
plt.title('Items selection')
plt.show()